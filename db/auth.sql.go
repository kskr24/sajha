// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package db

import (
	"context"
)

const deleteUserByIdAndName = `-- name: DeleteUserByIdAndName :exec
DELETE FROM users
WHERE id=$1 AND name=$2
`

type DeleteUserByIdAndNameParams struct {
	ID   int64
	Name string
}

func (q *Queries) DeleteUserByIdAndName(ctx context.Context, arg DeleteUserByIdAndNameParams) error {
	_, err := q.db.Exec(ctx, deleteUserByIdAndName, arg.ID, arg.Name)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, password
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const getUsersByName = `-- name: GetUsersByName :many
SELECT id, name, password
FROM users
WHERE name = $1
`

func (q *Queries) GetUsersByName(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (name, password)
VALUES ($1, $2)
RETURNING id
`

type InsertUserParams struct {
	Name     string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}
